def recordDeployment(owner, repo, ref, status, environmentURL, environment = "preview", description = "Deploy to preview environment") {
  withCredentials([usernamePassword(credentialsId: 'github-app-infra', usernameVariable: 'GITHUB_APP', passwordVariable: 'GH_TOKEN')]) {
    def json = writeJSON(returnText: true, json: [
        "ref": ref,
        "environment": environment,
        "description": description,
        "required_contexts": [],
        "auto_merge": false,
        "auto_inactive": false,
        "transient_environment": environment != "production",
    ])
    def id = readJSON(text: sh(script: "gh api repos/${owner}/${repo}/deployments  -X POST --input - << EOF\n${json}\nEOF", returnStdout: true).trim()).id
    if (id == ''){
      error('Unable to create deployment')
    }
    json = writeJSON(returnText: true, json: [
        "state": status,
        "environment": environment,
        "description": description,
        "log_url": "${BUILD_URL}console",
        "environment_url": environmentURL,
    ])
    sh("gh api repos/${owner}/${repo}/deployments/${id}/statuses  -X POST --input - << EOF\n${json}\nEOF")
  }
}

pipeline {
  agent {
    kubernetes {
      yaml '''
apiVersion: "v1"
kind: "Pod"
metadata:
  labels:
    jenkins: "agent"
    job: "plugin-site"
spec:
  tolerations:
    - key: "os"
      operator: "Equal"
      value: "linux"
      effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                  - linux
  restartPolicy: "Never"
  automountServiceAccountToken: false
  containers:
    - name: "jnlp"
      image: "jenkinsciinfra/builder:2.0.23@sha256:3c75a277feb40156d8b82cbda64a674484d94c50d7b63a4a789021e048011311"
      resources:
        limits: {}
        requests:
          memory: "4Gi"
          cpu: "2"
      '''
    }
  }

  environment {
    TZ = "UTC"
    GET_CONTENT = "true"
    NODE_ENV = "production"
  }

  triggers {
    cron("${env.BRANCH_NAME == 'master' ? 'H H/3 * * *' : ''}")
  }

  options {
    timeout(time: 60, unit: 'MINUTES')
    ansiColor('xterm')
    disableConcurrentBuilds(abortPrevious: true)
    buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')
  }

  stages {
    stage('Install Dependencies') {
      steps {
        sh 'NODE_ENV=development yarn install'
      }
    }

    stage('Build PR') {
      when {
        not {
          branch "master"
        }
      }
      environment {
        DISABLE_SEARCH_ENGINE = "true"
        GATSBY_ALGOLIA_APP_ID = credentials('algolia-plugins-app-id')
        GATSBY_ALGOLIA_SEARCH_KEY = credentials('algolia-plugins-search-key')
        NETLIFY = "true"
      }
      steps {
        sh 'yarn build'
      }
    }

    stage('Build Production') {
      when {
        branch "master"
      }
      environment {
        GATSBY_MATOMO_SITE_ID = "1"
        GATSBY_MATOMO_SITE_URL = "https://jenkins-matomo.do.g4v.dev"
        GATSBY_SENTRY_DSN = "https://495b0bd32a5e4a2287c3fe4b061ee24f@sentry.io/1882460"
        GATSBY_ALGOLIA_APP_ID = credentials('algolia-plugins-app-id')
        GATSBY_ALGOLIA_SEARCH_KEY = credentials('algolia-plugins-search-key')
        GATSBY_ALGOLIA_WRITE_KEY = credentials('algolia-plugins-write-key')
      }
      steps {
        sh 'yarn build'
      }
    }

    stage('Check build') {
      when { expression { return !fileExists('./plugins/plugin-site/public/index.html') } }
      steps {
        error("Something went wrong, index.html was not generated")
      }
    }

    stage('Lint and Test') {
      environment {
        NODE_ENV = "development"
      }
      steps {
        sh '''
          yarn lint
          yarn test
        '''
      }
    }

    stage('Deploy to azure') {
      when {
        branch "master"
      }
      environment {
        PLUGINSITE_STORAGEACCOUNTKEY = credentials('PLUGINSITE_STORAGEACCOUNTKEY')
      }
      steps {
        sh('''
            blobxfer upload \
          --local-path ./plugins/plugin-site/public \
          --storage-account-key $PLUGINSITE_STORAGEACCOUNTKEY \
          --storage-account prodpluginsite \
          --remote-path pluginsite \
          --recursive \
          --mode file \
          --skip-on-md5-match \
          --file-md5 \
          --connect-timeout 30 \
          --delete
        ''')
      }
    }

    stage('Deploy to preview site') {
      when {
        changeRequest target: 'master'
      }
      environment {
        NETLIFY_AUTH_TOKEN = credentials('netlify-auth-token')
      }
      post {
        success {
          recordDeployment('jenkins-infra', 'plugin-site', pullRequest.head, 'success', "https://deploy-preview-${CHANGE_ID}--jenkins-plugin-site-pr.netlify.app")
        }
        failure {
          recordDeployment('jenkins-infra', 'plugin-site', pullRequest.head, 'failure', "https://deploy-preview-${CHANGE_ID}--jenkins-plugin-site-pr.netlify.app")
        }
      }
      steps {
        sh('/usr/local/bin/netlify-deploy --siteName "jenkins-plugin-site-pr" --title "Preview deploy for ${CHANGE_ID}" --alias "deploy-preview-${CHANGE_ID}" -d ./plugins/plugin-site/public')
      }
    }
  }
}

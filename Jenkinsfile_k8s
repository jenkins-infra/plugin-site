pipeline {
  agent {
    kubernetes {
      inheritFrom 'jnlp-linux'
      yaml '''
apiVersion: "v1"
kind: "Pod"
metadata:
  labels:
    jenkins: "agent"
    job: "plugin-site"
spec:
  tolerations:
    - key: "os"
      operator: "Equal"
      value: "linux"
      effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                  - linux
  restartPolicy: "Never"
  containers:
    - name: "node"
      image: "node:14"
      securityContext:
        privileged: false
      tty: true
      command:
      - cat
    - name: "blobxfer"
      image: "mcr.microsoft.com/blobxfer:1.9.1"
      command:
      - cat
      securityContext:
        privileged: false
      tty: true
      '''
    }
  }

  environment {
    GET_CONTENT = "true"
    NODE_ENV = "production"
    HOME = "${WORKSPACE}"
    GATSBY_MATOMO_SITE_ID = "1"
    GATSBY_MATOMO_SITE_URL = "https://jenkins-matomo.do.g4v.dev"
  }

  triggers {
    cron('H H/3 * * *')
  }

  options {
    timeout(time: 60, unit: 'MINUTES')
    ansiColor('xterm')
    buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')
  }

  stages {
    stage('NPM Install') {
      steps {
        container('node') {
          sh 'NODE_ENV=development npm ci'
        }
      }
    }

    stage('Build PR') {
      when {
        not {
          branch "master"
        }
      }
      steps {
        container('node') {
          sh 'npm run build'
        }
      }
    }

    stage('Build Production') {
      when {
        branch "master"
      }
      environment {
        GATSBY_SENTRY_DSN = "https://495b0bd32a5e4a2287c3fe4b061ee24f@sentry.io/1882460"
        GATSBY_ALGOLIA_APP_ID = credentials('algolia-plugins-app-id')
        GATSBY_ALGOLIA_SEARCH_KEY = credentials('algolia-plugins-search-key')
        GATSBY_ALGOLIA_WRITE_KEY = credentials('algolia-plugins-write-key')
      }
      steps {
        container('node') {
          sh 'npm run build'
        }
      }
    }

    stage('Check build') {
      steps {
        container('node') {
          sh 'test -e public/index.html || exit 1'
        }
      }
    }

    stage('Lint and Test') {
      steps {
        container('node') {
          sh 'npm run lint'
          sh 'npm run test'
        }
      }
    }

    stage('Deploy to azure') {
      when {
        branch "master"
      }
      environment {
        PLUGINSITE_STORAGEACCOUNTKEY = credentials('PLUGINSITE_STORAGEACCOUNTKEY')
      }
      steps {
        container('blobxfer') {
          sh("""blobxfer upload \
            --local-path public \
            --storage-account-key $PLUGINSITE_STORAGEACCOUNTKEY \
            --storage-account prodpluginsite \
            --remote-path pluginsite \
            --recursive \
            --mode file \
            --skip-on-md5-match \
            --file-md5 \
            --connect-timeout 30 \
            --delete
          """)
        }
      }
    }
  }
}
